# Auto-generated using compose2nix v0.1.7.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."elmmoodle-moodle" = {
    image = "erseco/alpine-moodle";
    environment = {
      DB_HOST = "postgres";
      DB_NAME = "moodle";
      DB_PASS = "moodle-nandar";
      DB_PORT = "5432";
      DB_PREFIX = "mdl_";
      DB_TYPE = "pgsql";
      DB_USER = "moodle";
      LANG = "en_US.UTF-8";
      LANGUAGE = "en_US:en";
      MOODLE_EMAIL = "nandarsigma06@gmail.com";
      MOODLE_LANGUAGE = "en";
      MOODLE_MAIL_NOREPLY_ADDRESS = "noreply@localhost";
      MOODLE_MAIL_PREFIX = "[moodle]";
      MOODLE_PASSWORD = "nandar88";
      MOODLE_SITENAME = "E-MathEd";
      MOODLE_USERNAME = "nandarmath";
      REDIS_HOST = "redis";
      REVERSEPROXY = "false";
      SITE_URL = "http://localhost";
      SMTP_HOST = "smtp.gmail.com";
      SMTP_PASSWORD = "@R14str113052017";
      SMTP_PORT = "587";
      SMTP_PROTOCOL = "tls";
      SMTP_USER = "nandarsigma06@gmail.com";
      SSLPROXY = "false";
    };
    volumes = [
      "moodledata:/var/www/moodledata:rw"
      "moodlehtml:/var/www/html:rw"
    ];
    ports = [
      "80:8082/tcp"
    ];
    dependsOn = [
      "elmmoodle-postgres"
      "elmmoodle-redis"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=moodle"
      "--network=elmmoodle-default"
    ];
  };
  systemd.services."podman-elmmoodle-moodle" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-elmmoodle-default.service"
    ];
    requires = [
      "podman-network-elmmoodle-default.service"
    ];
    partOf = [
      "podman-compose-elmmoodle-root.target"
    ];
    unitConfig.UpheldBy = [
      "podman-elmmoodle-postgres.service"
      "podman-elmmoodle-redis.service"
    ];
    wantedBy = [
      "podman-compose-elmmoodle-root.target"
    ];
  };
  virtualisation.oci-containers.containers."elmmoodle-postgres" = {
    image = "postgres:alpine";
    environment = {
      POSTGRES_DB = "moodle";
      POSTGRES_PASSWORD = "moodle";
      POSTGRES_USER = "moodle";
    };
    volumes = [
      "postgres:/var/lib/postgresql/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=postgres"
      "--network=elmmoodle-default"
    ];
  };
  systemd.services."podman-elmmoodle-postgres" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-elmmoodle-default.service"
    ];
    requires = [
      "podman-network-elmmoodle-default.service"
    ];
    partOf = [
      "podman-compose-elmmoodle-root.target"
    ];
    wantedBy = [
      "podman-compose-elmmoodle-root.target"
    ];
  };
  virtualisation.oci-containers.containers."elmmoodle-redis" = {
    image = "redis:alpine";
    log-driver = "journald";
    extraOptions = [
      "--network-alias=redis"
      "--network=elmmoodle-default"
    ];
  };
  systemd.services."podman-elmmoodle-redis" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
    };
    after = [
      "podman-network-elmmoodle-default.service"
    ];
    requires = [
      "podman-network-elmmoodle-default.service"
    ];
    partOf = [
      "podman-compose-elmmoodle-root.target"
    ];
    wantedBy = [
      "podman-compose-elmmoodle-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-elmmoodle-default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.podman}/bin/podman network rm -f elmmoodle-default";
    };
    script = ''
      podman network inspect elmmoodle-default || podman network create elmmoodle-default --opt isolate=true
    '';
    partOf = [ "podman-compose-elmmoodle-root.target" ];
    wantedBy = [ "podman-compose-elmmoodle-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-elmmoodle-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
