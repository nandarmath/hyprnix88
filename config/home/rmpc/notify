#!/usr/bin/env sh

# =============================================================================
# 音乐播放器通知脚本（带图片压缩功能）
# =============================================================================

# 配置部分
TMP_DIR="/tmp/rmpc"
ALBUM_ART_PATH="$TMP_DIR/notification_cover"
COMPRESSED_ALBUM_ART_PATH="$TMP_DIR/notification_cover_compressed.jpg"
DEFAULT_ALBUM_ART_PATH="$TMP_DIR/default_album_art.jpg"

# 图片压缩配置
MAX_WIDTH=256    # 最大宽度（像素）
MAX_HEIGHT=256   # 最大高度（像素）
QUALITY=85       # JPEG质量 (1-100)
MAX_FILE_SIZE=50 # 最大文件大小（KB）

# 颜色输出函数
print_info() {
    echo "\033[34m[INFO]\033[0m $1"
}

print_error() {
    echo "\033[31m[ERROR]\033[0m $1" >&2
}

print_success() {
    echo "\033[32m[SUCCESS]\033[0m $1"
}

# 检查必要的工具
check_dependencies() {
    local missing_tools=""

    if ! command -v rmpc >/dev/null 2>&1; then
        missing_tools="$missing_tools rmpc"
    fi

    if ! command -v notify-send >/dev/null 2>&1; then
        missing_tools="$missing_tools notify-send"
    fi

    # 检查图片处理工具（按优先级排序）
    if command -v magick >/dev/null 2>&1; then
        IMAGE_TOOL="magick"
    elif command -v convert >/dev/null 2>&1; then
        IMAGE_TOOL="convert"
    elif command -v ffmpeg >/dev/null 2>&1; then
        IMAGE_TOOL="ffmpeg"
    else
        missing_tools="$missing_tools imagemagick或ffmpeg"
    fi

    if [ -n "$missing_tools" ]; then
        print_error "缺少必要工具: $missing_tools"
        print_info "请安装缺少的工具："
        echo "  - Ubuntu/Debian: sudo apt install rmpc libnotify-bin imagemagick"
        echo "  - Fedora: sudo dnf install rmpc libnotify ImageMagick"
        echo "  - Arch: sudo pacman -S rmpc libnotify imagemagick"
        exit 1
    fi
}

# 获取文件大小（KB）
get_file_size_kb() {
    if [ -f "$1" ]; then
        # 使用 stat 命令，兼容不同系统
        if stat -c%s "$1" >/dev/null 2>&1; then
            # GNU stat (Linux)
            echo $(($(stat -c%s "$1") / 1024))
        elif stat -f%z "$1" >/dev/null 2>&1; then
            # BSD stat (macOS)
            echo $(($(stat -f%z "$1") / 1024))
        else
            # 备用方案
            echo 0
        fi
    else
        echo 0
    fi
}

# 获取图片尺寸
get_image_dimensions() {
    if [ "$IMAGE_TOOL" = "magick" ] || [ "$IMAGE_TOOL" = "convert" ]; then
        identify -format "%wx%h" "$1" 2>/dev/null
    elif [ "$IMAGE_TOOL" = "ffmpeg" ]; then
        ffprobe -v quiet -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$1" 2>/dev/null
    fi
}

# 压缩图片函数
compress_image() {
    local input_file="$1"
    local output_file="$2"

    if [ ! -f "$input_file" ]; then
        print_error "输入文件不存在: $input_file"
        return 1
    fi

    print_info "开始压缩图片..."

    # 获取原始文件信息
    local original_size=$(get_file_size_kb "$input_file")
    local dimensions=$(get_image_dimensions "$input_file")

    print_info "原始文件: ${original_size}KB, 尺寸: ${dimensions:-未知}"

    # 如果文件已经很小且尺寸合适，直接复制
    if [ "$original_size" -le "$MAX_FILE_SIZE" ] && [ -n "$dimensions" ]; then
        local width=$(echo "$dimensions" | cut -d'x' -f1)
        local height=$(echo "$dimensions" | cut -d'x' -f2)

        if [ "$width" -le "$MAX_WIDTH" ] && [ "$height" -le "$MAX_HEIGHT" ]; then
            print_info "图片已符合要求，直接使用"
            cp "$input_file" "$output_file"
            return 0
        fi
    fi

    # 执行压缩
    local success=false

    if [ "$IMAGE_TOOL" = "magick" ]; then
        if magick "$input_file" \
            -resize "${MAX_WIDTH}x${MAX_HEIGHT}>" \
            -quality "$QUALITY" \
            -strip \
            "$output_file" 2>/dev/null; then
            success=true
        fi
    elif [ "$IMAGE_TOOL" = "convert" ]; then
        if convert "$input_file" \
            -resize "${MAX_WIDTH}x${MAX_HEIGHT}>" \
            -quality "$QUALITY" \
            -strip \
            "$output_file" 2>/dev/null; then
            success=true
        fi
    elif [ "$IMAGE_TOOL" = "ffmpeg" ]; then
        if ffmpeg -y -i "$input_file" \
            -vf "scale='min($MAX_WIDTH,iw)':'min($MAX_HEIGHT,ih)':force_original_aspect_ratio=decrease" \
            -q:v 2 \
            "$output_file" 2>/dev/null; then
            success=true
        fi
    fi

    if $success && [ -f "$output_file" ]; then
        local compressed_size=$(get_file_size_kb "$output_file")
        local new_dimensions=$(get_image_dimensions "$output_file")

        print_success "压缩完成: ${compressed_size}KB, 尺寸: ${new_dimensions:-未知}"
        print_info "压缩率: $(((original_size - compressed_size) * 100 / original_size))%"
        return 0
    else
        print_error "图片压缩失败"
        return 1
    fi
}

# 创建默认专辑封面
create_default_album_art() {
    if [ ! -f "$DEFAULT_ALBUM_ART_PATH" ]; then
        print_info "创建默认专辑封面..."

        if [ "$IMAGE_TOOL" = "magick" ]; then
            magick -size "${MAX_WIDTH}x${MAX_HEIGHT}" xc:"#2c3e50" \
                -gravity center \
                -pointsize 48 \
                -fill "#ecf0f1" \
                -annotate +0+0 "♪" \
                "$DEFAULT_ALBUM_ART_PATH" 2>/dev/null
        elif [ "$IMAGE_TOOL" = "convert" ]; then
            convert -size "${MAX_WIDTH}x${MAX_HEIGHT}" xc:"#2c3e50" \
                -gravity center \
                -pointsize 48 \
                -fill "#ecf0f1" \
                -annotate +0+0 "♪" \
                "$DEFAULT_ALBUM_ART_PATH" 2>/dev/null
        else
            # 如果只有 ffmpeg，创建一个简单的彩色图片
            ffmpeg -y -f lavfi -i "color=c=#2c3e50:size=${MAX_WIDTH}x${MAX_HEIGHT}:d=1" \
                -vframes 1 "$DEFAULT_ALBUM_ART_PATH" 2>/dev/null
        fi

        if [ -f "$DEFAULT_ALBUM_ART_PATH" ]; then
            print_success "默认专辑封面创建成功"
        else
            print_error "默认专辑封面创建失败"
        fi
    fi
}

# 主函数
main() {
    print_info "启动音乐通知脚本..."

    # 检查依赖
    check_dependencies

    # 确保目录存在
    mkdir -p "$TMP_DIR"

    # 创建默认专辑封面
    create_default_album_art

    # 获取当前播放信息
    print_info "获取当前播放信息..."

    # 尝试获取专辑封面
    local final_album_art_path=""

    if rmpc albumart --output "$ALBUM_ART_PATH" 2>/dev/null; then
        print_success "成功获取专辑封面"

        # 压缩专辑封面
        if compress_image "$ALBUM_ART_PATH" "$COMPRESSED_ALBUM_ART_PATH"; then
            final_album_art_path="$COMPRESSED_ALBUM_ART_PATH"
        else
            print_error "压缩失败，使用原始封面"
            final_album_art_path="$ALBUM_ART_PATH"
        fi
    else
        print_info "未找到专辑封面，使用默认封面"
        final_album_art_path="$DEFAULT_ALBUM_ART_PATH"
    fi

    # 获取音乐信息（使用原始方法从环境变量）
    # 注意：ARTIST 和 TITLE 应该由调用脚本的程序设置为环境变量
    if [ -z "$ARTIST" ] || [ -z "$TITLE" ]; then
        print_info "从 rmpc 获取艺术家和标题信息..."
        ARTIST=$(rmpc status --format "%artist%" 2>/dev/null || echo "Unknown Artist")
        TITLE=$(rmpc status --format "%title%" 2>/dev/null || echo "Unknown Title")
    fi

    # 构建通知内容
    local notification_body="$ARTIST - $TITLE"

    # 发送通知（使用原始格式）
    print_info "发送通知..."

    if notify-send \
        -h "string:image-path:${final_album_art_path}" \
        -a "rmpc" \
        "Now Playing" \
        "$ARTIST - $TITLE"; then
        print_success "通知发送成功"
    else
        print_error "通知发送失败"
        exit 1
    fi

    # 清理临时文件（可选）
    # rm -f "$ALBUM_ART_PATH" "$COMPRESSED_ALBUM_ART_PATH"

    print_success "脚本执行完成"
}

# 执行主函数
main "$@"#!/usr/bin/env sh

# =============================================================================
# 音乐播放器通知脚本（带图片压缩功能）
# =============================================================================

# 配置部分
TMP_DIR="/tmp/rmpc"
ALBUM_ART_PATH="$TMP_DIR/notification_cover"
COMPRESSED_ALBUM_ART_PATH="$TMP_DIR/notification_cover_compressed.jpg"
DEFAULT_ALBUM_ART_PATH="$TMP_DIR/default_album_art.jpg"

# 图片压缩配置
MAX_WIDTH=256    # 最大宽度（像素）
MAX_HEIGHT=256   # 最大高度（像素）
QUALITY=85       # JPEG质量 (1-100)
MAX_FILE_SIZE=50 # 最大文件大小（KB）

# 颜色输出函数
print_info() {
    echo "\033[34m[INFO]\033[0m $1"
}

print_error() {
    echo "\033[31m[ERROR]\033[0m $1" >&2
}

print_success() {
    echo "\033[32m[SUCCESS]\033[0m $1"
}

# 检查必要的工具
check_dependencies() {
    local missing_tools=""

    if ! command -v rmpc >/dev/null 2>&1; then
        missing_tools="$missing_tools rmpc"
    fi

    if ! command -v notify-send >/dev/null 2>&1; then
        missing_tools="$missing_tools notify-send"
    fi

    # 检查图片处理工具（按优先级排序）
    if command -v magick >/dev/null 2>&1; then
        IMAGE_TOOL="magick"
    elif command -v convert >/dev/null 2>&1; then
        IMAGE_TOOL="convert"
    elif command -v ffmpeg >/dev/null 2>&1; then
        IMAGE_TOOL="ffmpeg"
    else
        missing_tools="$missing_tools imagemagick或ffmpeg"
    fi

    if [ -n "$missing_tools" ]; then
        print_error "缺少必要工具: $missing_tools"
        print_info "请安装缺少的工具："
        echo "  - Ubuntu/Debian: sudo apt install rmpc libnotify-bin imagemagick"
        echo "  - Fedora: sudo dnf install rmpc libnotify ImageMagick"
        echo "  - Arch: sudo pacman -S rmpc libnotify imagemagick"
        exit 1
    fi
}

# 获取文件大小（KB）
get_file_size_kb() {
    if [ -f "$1" ]; then
        # 使用 stat 命令，兼容不同系统
        if stat -c%s "$1" >/dev/null 2>&1; then
            # GNU stat (Linux)
            echo $(($(stat -c%s "$1") / 1024))
        elif stat -f%z "$1" >/dev/null 2>&1; then
            # BSD stat (macOS)
            echo $(($(stat -f%z "$1") / 1024))
        else
            # 备用方案
            echo 0
        fi
    else
        echo 0
    fi
}

# 获取图片尺寸
get_image_dimensions() {
    if [ "$IMAGE_TOOL" = "magick" ] || [ "$IMAGE_TOOL" = "convert" ]; then
        identify -format "%wx%h" "$1" 2>/dev/null
    elif [ "$IMAGE_TOOL" = "ffmpeg" ]; then
        ffprobe -v quiet -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$1" 2>/dev/null
    fi
}

# 压缩图片函数
compress_image() {
    local input_file="$1"
    local output_file="$2"

    if [ ! -f "$input_file" ]; then
        print_error "输入文件不存在: $input_file"
        return 1
    fi

    print_info "开始压缩图片..."

    # 获取原始文件信息
    local original_size=$(get_file_size_kb "$input_file")
    local dimensions=$(get_image_dimensions "$input_file")

    print_info "原始文件: ${original_size}KB, 尺寸: ${dimensions:-未知}"

    # 如果文件已经很小且尺寸合适，直接复制
    if [ "$original_size" -le "$MAX_FILE_SIZE" ] && [ -n "$dimensions" ]; then
        local width=$(echo "$dimensions" | cut -d'x' -f1)
        local height=$(echo "$dimensions" | cut -d'x' -f2)

        if [ "$width" -le "$MAX_WIDTH" ] && [ "$height" -le "$MAX_HEIGHT" ]; then
            print_info "图片已符合要求，直接使用"
            cp "$input_file" "$output_file"
            return 0
        fi
    fi

    # 执行压缩
    local success=false

    if [ "$IMAGE_TOOL" = "magick" ]; then
        if magick "$input_file" \
            -resize "${MAX_WIDTH}x${MAX_HEIGHT}>" \
            -quality "$QUALITY" \
            -strip \
            "$output_file" 2>/dev/null; then
            success=true
        fi
    elif [ "$IMAGE_TOOL" = "convert" ]; then
        if convert "$input_file" \
            -resize "${MAX_WIDTH}x${MAX_HEIGHT}>" \
            -quality "$QUALITY" \
            -strip \
            "$output_file" 2>/dev/null; then
            success=true
        fi
    elif [ "$IMAGE_TOOL" = "ffmpeg" ]; then
        if ffmpeg -y -i "$input_file" \
            -vf "scale='min($MAX_WIDTH,iw)':'min($MAX_HEIGHT,ih)':force_original_aspect_ratio=decrease" \
            -q:v 2 \
            "$output_file" 2>/dev/null; then
            success=true
        fi
    fi

    if $success && [ -f "$output_file" ]; then
        local compressed_size=$(get_file_size_kb "$output_file")
        local new_dimensions=$(get_image_dimensions "$output_file")

        print_success "压缩完成: ${compressed_size}KB, 尺寸: ${new_dimensions:-未知}"
        print_info "压缩率: $(((original_size - compressed_size) * 100 / original_size))%"
        return 0
    else
        print_error "图片压缩失败"
        return 1
    fi
}

# 创建默认专辑封面
create_default_album_art() {
    if [ ! -f "$DEFAULT_ALBUM_ART_PATH" ]; then
        print_info "创建默认专辑封面..."

        if [ "$IMAGE_TOOL" = "magick" ]; then
            magick -size "${MAX_WIDTH}x${MAX_HEIGHT}" xc:"#2c3e50" \
                -gravity center \
                -pointsize 48 \
                -fill "#ecf0f1" \
                -annotate +0+0 "♪" \
                "$DEFAULT_ALBUM_ART_PATH" 2>/dev/null
        elif [ "$IMAGE_TOOL" = "convert" ]; then
            convert -size "${MAX_WIDTH}x${MAX_HEIGHT}" xc:"#2c3e50" \
                -gravity center \
                -pointsize 48 \
                -fill "#ecf0f1" \
                -annotate +0+0 "♪" \
                "$DEFAULT_ALBUM_ART_PATH" 2>/dev/null
        else
            # 如果只有 ffmpeg，创建一个简单的彩色图片
            ffmpeg -y -f lavfi -i "color=c=#2c3e50:size=${MAX_WIDTH}x${MAX_HEIGHT}:d=1" \
                -vframes 1 "$DEFAULT_ALBUM_ART_PATH" 2>/dev/null
        fi

        if [ -f "$DEFAULT_ALBUM_ART_PATH" ]; then
            print_success "默认专辑封面创建成功"
        else
            print_error "默认专辑封面创建失败"
        fi
    fi
}

# 主函数
main() {
    print_info "启动音乐通知脚本..."

    # 检查依赖
    check_dependencies

    # 确保目录存在
    mkdir -p "$TMP_DIR"

    # 创建默认专辑封面
    create_default_album_art

    # 获取当前播放信息
    print_info "获取当前播放信息..."

    # 尝试获取专辑封面
    local final_album_art_path=""

    if rmpc albumart --output "$ALBUM_ART_PATH" 2>/dev/null; then
        print_success "成功获取专辑封面"

        # 压缩专辑封面
        if compress_image "$ALBUM_ART_PATH" "$COMPRESSED_ALBUM_ART_PATH"; then
            final_album_art_path="$COMPRESSED_ALBUM_ART_PATH"
        else
            print_error "压缩失败，使用原始封面"
            final_album_art_path="$ALBUM_ART_PATH"
        fi
    else
        print_info "未找到专辑封面，使用默认封面"
        final_album_art_path="$DEFAULT_ALBUM_ART_PATH"
    fi

    # 获取音乐信息（使用原始方法从环境变量）
    # 注意：ARTIST 和 TITLE 应该由调用脚本的程序设置为环境变量
    if [ -z "$ARTIST" ] || [ -z "$TITLE" ]; then
        print_info "从 rmpc 获取艺术家和标题信息..."
        ARTIST=$(rmpc status --format "%artist%" 2>/dev/null || echo "Unknown Artist")
        TITLE=$(rmpc status --format "%title%" 2>/dev/null || echo "Unknown Title")
    fi

    # 构建通知内容
    local notification_body="$ARTIST - $TITLE"

    # 发送通知（使用原始格式）
    print_info "发送通知..."

    if notify-send \
        -h "string:image-path:${final_album_art_path}" \
        -a "rmpc" \
        "Now Playing" \
        "$ARTIST - $TITLE"; then
        print_success "通知发送成功"
    else
        print_error "通知发送失败"
        exit 1
    fi

    # 清理临时文件（可选）
    # rm -f "$ALBUM_ART_PATH" "$COMPRESSED_ALBUM_ART_PATH"

    print_success "脚本执行完成"
}

# 执行主函数
main "$@"
